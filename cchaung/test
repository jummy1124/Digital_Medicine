{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## test+train全用上"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from os import listdir\n",
    "from os.path import isfile, isdir, join\n",
    "from collections import Counter\n",
    "import csv\n",
    "import numpy\n",
    "import pandas as pd\n",
    "from gensim.models.word2vec import Word2Vec\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "from data_preprocess import content_fraction\n",
    "from Dataloader import dataloader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_path = \"..\\Case_Presentation_1_Data\\Train_Textual\\\\\"\n",
    "test_data_path  = \"..\\Case_Presentation_1_Data\\Test_Intuitive\\\\\"\n",
    "\n",
    "train_data = dataloader(train_data_path)\n",
    "test_data  = dataloader(test_data_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['discharg', 'summari', 'unsign', 'admiss', 'date', 'report', 'statu', 'unsign', 'discharg', 'date', 'discharg', 'diagnosi', 'coronari', 'arteri', 'diseas', 'unstabl', 'angina', 'histori', 'present', 'ill', 'hoopl', 'old', 'woman', 'statu', 'post', 'doubl', 'coronari', 'arteri', 'bypass', 'graft', 'endarterectomi', 'fourteen', 'year', 'ago', 'develop', 'angina', 'six', 'month', 'ago', 'suffer', 'unstabl', 'angina', 'sever', 'day', 'coronari', 'catheter', 'result', 'show', 'sever', 'occlus', 'saphen', 'vein', 'graft', 'occlus', 'left', 'anterior', 'descend', 'echocardiogram', 'show', 'excel', 'left', 'ventricular', 'function', 'intraaort', 'balloon', 'pump', 'place', 'reliev', 'intract', 'angina', 'past', 'medic', 'histori', 'signific', 'chest', 'pain', 'short', 'breath', 'admit', 'talc', 'commun', 'medic', 'center', 'catheter', 'coronari', 'arteri', 'bypass', 'graft', 'coronari', 'endarterectomi', 'no', 'chest', 'pain', 'six', 'month', 'prior', 'admiss', 'time', 'inder', 'aspirin', 'six', 'month', 'prior', 'admiss', 'develop', 'recurr', 'typic', 'angina', 'march', 'develop', 'chest', 'pain', 'rest', 'went', 'packpin', 'medic', 'center', 'rule', 'myocardi', 'infarct', 'januari', 'recurr', 'chest', 'pain', 'depress', 'transfer', 'past', 'medic', 'histori', 'signific', 'plu', 'hypertens', 'hysterectomi', 'current', 'medic', 'transfer', 'aspirin', 'diltiazem', 'inder', 'xanax', 'prn', 'allergi', 'allergi', 'penicillin', 'caus', 'rash', 'famili', 'histori', 'posit', 'famili', 'histori', 'coronari', 'arteri', 'diseas', 'physic', 'examin', 'healthi', 'appear', 'woman', 'no', 'appar', 'distress', 'heent', 'normal', 'neck', 'suppl', 'no', 'costovertebr', 'angl', 'tender', 'back', 'lung', 'bibasilar', 'rale', 'heart', 'show', 'point', 'maxim', 'intens', 'seventh', 'intercost', 'space', 'regular', 'rate', 'rhythm', 'normal', 'jugular', 'venou', 'pressur', 'flat', 'jugular', 'vein', 'undistend', 'abdomen', 'posit', 'bowel', 'sound', 'not', 'hepatosplenomegali', 'palpabl', 'mass', 'extrem', 'without', 'edema', 'puls', 'carotid', 'puls', 'side', 'without', 'bruit', 'femor', 'bruit', 'right', 'no', 'bruit', 'left', 'dorsali', 'pedi', 'puls', 'bilater', 'well', 'posterior', 'tibiali', 'puls', 'neurolog', 'cranial', 'nerv', 'iixii', 'intact', 'motor', 'examin', 'throughout', 'reflex', 'throughout', 'downgo', 'toe', 'laboratori', 'examin', 'ekg', 'show', 'depress', 'biphas', 'chest', 'xray', 'hospit', 'normal', 'without', 'congest', 'heart', 'failur', 'hospit', 'cours', 'oper', 'redo', 'coronari', 'arteri', 'bypass', 'graft', 'done', 'kasson', 'postop', 'difficulti', 'wean', 'cardiopulmonari', 'bypass', 'continu', 'well', 'without', 'evid', 'ectopi', 'normal', 'sinu', 'rhythm', 'discharg', 'disposit', 'discharg', 'medic', 'ecotrin', 'inder', 'qid', 'bactrim', 'one', 'tablet', 'bid', 'time', 'seven', 'day', 'no', 'complic', 'stabl', 'discharg', 'disposit', 'home', 'followup', 'within', 'week', 'doctor', 'mathew', 'hector', 'batch', 'report', 'dictat', 'dexter', 'lillick', 'cinanholatrundloy', 'rehab']\n"
     ]
    }
   ],
   "source": [
    "print(train_data.text_list[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 取train data中非肥胖的data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Word2Vec(train_data.text_list[200:400]+test_data.text_list[200:400])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def similar(w2v_model, word, target, topn=10):\n",
    "        try:\n",
    "            return w2v_model.wv.similarity(word, target)\n",
    "        except:\n",
    "            return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def most_similar(w2v_model, words, topn=50):\n",
    "    similar_df = pd.DataFrame()\n",
    "    for word in words:\n",
    "        try:\n",
    "            similar_words = pd.DataFrame(w2v_model.wv.most_similar(word, topn=topn), columns=[word, 'cos'])\n",
    "            similar_df = pd.concat([similar_df, similar_words], axis=1)\n",
    "        except:\n",
    "            print(word, \"not found in Word2Vec model!\")\n",
    "    return similar_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   not       cos\n",
      "0                brief  0.810683\n",
      "1   treatmentsprocedur  0.803357\n",
      "2                could  0.783420\n",
      "3                 none  0.771339\n",
      "4             endoscop  0.754287\n",
      "5               detail  0.738297\n",
      "6             reproduc  0.735937\n",
      "7                resum  0.717200\n",
      "8    pericardiocentesi  0.701829\n",
      "9               applic  0.696396\n",
      "10               taken  0.690885\n",
      "11               drive  0.685846\n",
      "12            procedur  0.683053\n",
      "13              though  0.681979\n",
      "14                oper  0.680544\n",
      "15       arthrocentesi  0.672568\n",
      "16                felt  0.666656\n",
      "17              cather  0.654333\n",
      "18               think  0.652535\n",
      "19             complet  0.643711\n",
      "20               refer  0.640845\n",
      "21             conting  0.640519\n",
      "22            descript  0.634690\n",
      "23             anticip  0.633131\n",
      "24             brought  0.631633\n",
      "25                upon  0.627857\n",
      "26               drink  0.627191\n",
      "27             uncompl  0.626647\n",
      "28                 cbd  0.624709\n",
      "29                 egd  0.622254\n",
      "30        tracheostomi  0.619750\n",
      "31              suicid  0.613936\n",
      "32              memori  0.612342\n",
      "33                 ggi  0.610397\n",
      "34                 yet  0.605658\n",
      "35                mibi  0.605303\n",
      "36               aspir  0.602243\n",
      "37              stress  0.602186\n",
      "38             preoper  0.598914\n",
      "39          laparoscop  0.596945\n",
      "40            therefor  0.594934\n",
      "41                fact  0.593177\n",
      "42                 may  0.592668\n",
      "43                feel  0.592159\n",
      "44             remaind  0.592099\n",
      "45              hospit  0.590913\n",
      "46               avail  0.589237\n",
      "47                room  0.588349\n",
      "48              actual  0.587543\n",
      "49              regist  0.586882\n"
     ]
    }
   ],
   "source": [
    "print(most_similar(model, [\"not\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   hypercholesterolemia       cos\n",
      "0           hypothyroid  0.974503\n",
      "1        hyperlipidemia  0.961047\n",
      "2            neuropathi  0.959310\n",
      "3                  iddm  0.957886\n",
      "4             hypertens  0.947212\n",
      "5           retinopathi  0.945777\n",
      "6              arthriti  0.941097\n",
      "7            rheumatoid  0.939666\n",
      "8         insulindepend  0.937885\n",
      "9                reflux  0.936417\n",
      "10        gastroesophag  0.930013\n",
      "11            hyperchol  0.926645\n",
      "12              mellitu  0.923413\n",
      "13               seizur  0.923076\n",
      "14              bipolar  0.922982\n",
      "15             nephriti  0.915599\n",
      "16                  htn  0.913366\n",
      "17               disord  0.912117\n",
      "18                adult  0.912041\n",
      "19                niddm  0.906712\n",
      "20                  icd  0.905155\n",
      "21               asthma  0.902279\n",
      "22              depress  0.902200\n",
      "23                  osa  0.898812\n",
      "24           noninsulin  0.898111\n",
      "25                 gout  0.895338\n",
      "26                 gerd  0.894124\n",
      "27            longstand  0.893233\n",
      "28       cardiomyopathi  0.891558\n",
      "29                  def  0.891536\n",
      "30                  tah  0.891344\n",
      "31              nephrot  0.890594\n",
      "32               mother  0.889018\n",
      "33                 long  0.887647\n",
      "34                  tia  0.887584\n",
      "35               hiatal  0.886797\n",
      "36              brother  0.884545\n",
      "37          osteoporosi  0.881319\n",
      "38         dyslipidemia  0.879548\n",
      "39             obstruct  0.879259\n",
      "40          nephropathi  0.878506\n",
      "41              syndrom  0.877466\n",
      "42                  cad  0.877135\n",
      "43                  die  0.876196\n",
      "44         fibromyalgia  0.876155\n",
      "45           osteoarthr  0.875827\n",
      "46                degen  0.871771\n",
      "47               sister  0.870656\n",
      "48               peptic  0.869347\n",
      "49               father  0.868837\n"
     ]
    }
   ],
   "source": [
    "print(most_similar(model, [\"hypercholesterolemia\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 計分方式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def score(datakind, gap, target_word):\n",
    "    score=0\n",
    "    total = 0\n",
    "    for text in datakind:\n",
    "        for word in text:\n",
    "            if similar(model, word,  target_word)>gap:\n",
    "                score+=similar(model, word, target_word)\n",
    "        total+=score\n",
    "        score=0\n",
    "    average = total/200\n",
    "    return average"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "gap = 0.85\n",
    "target_word = \"hypercholesterolemia\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 不肥胖"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_unfat_score:  8.959987502098084\n"
     ]
    }
   ],
   "source": [
    "train_unfat_score = score(train_data.text_list[0:200], gap, target_word)\n",
    "print(\"train_unfat_score: \",train_unfat_score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 肥胖"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_fat_score:  10.295676111578942\n"
     ]
    }
   ],
   "source": [
    "train_fat_score = score(train_data.text_list[200:400], gap, target_word)\n",
    "print(\"train_fat_score: \",train_fat_score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Test data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 不肥胖"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_unfat_score:  8.513201183080673\n"
     ]
    }
   ],
   "source": [
    "test_unfat_score = score(test_data.text_list[0:200], gap, target_word)\n",
    "print(\"test_unfat_score: \",test_unfat_score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 肥胖"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_fat_score:  10.664034923911094\n"
     ]
    }
   ],
   "source": [
    "test_fat_score =score(test_data.text_list[200:400], gap, target_word)\n",
    "print(\"test_fat_score: \",test_fat_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "upper:  10.479855517745019\n"
     ]
    }
   ],
   "source": [
    "upper = (train_fat_score+test_fat_score)/2\n",
    "print(\"upper: \",upper)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lower:  8.736594342589378\n"
     ]
    }
   ],
   "source": [
    "lower =  (train_unfat_score+test_unfat_score)/2\n",
    "print(\"lower: \",lower)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "standard:  9.608224930167198\n"
     ]
    }
   ],
   "source": [
    "standard = (upper+lower)/2\n",
    "print(\"standard: \",standard)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "validation_data_path  = \"..\\Case_Presentation_1_Data\\Validation\\\\\"\n",
    "validation_data  = dataloader(validation_data_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.099488825201988"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score(validation_data.text_list, gap, target_word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50\n"
     ]
    }
   ],
   "source": [
    "score=0\n",
    "ans = []\n",
    "for text in validation_data.text_list:\n",
    "    for word in text:\n",
    "        if similar(model, word,  target_word)>gap:\n",
    "            score+=similar(model, word, target_word)\n",
    "    if score>standard:\n",
    "        ans.append(0)\n",
    "    else:\n",
    "        ans.append(1)\n",
    "    score=0\n",
    "\n",
    "print(len(ans))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1]\n"
     ]
    }
   ],
   "source": [
    "print(ans)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(validation_data.text_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "0\n",
      "1\n",
      "0\n",
      "1\n",
      "1\n",
      "1\n",
      "0\n",
      "0\n",
      "0\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "0\n",
      "1\n",
      "0\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "1\n",
      "0\n",
      "1\n",
      "0\n",
      "1\n",
      "0\n",
      "1\n",
      "0\n",
      "0\n",
      "1\n",
      "1\n",
      "1\n",
      "0\n",
      "0\n",
      "1\n",
      "1\n",
      "0\n",
      "1\n",
      "0\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "for i in ans:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# confusion matrix & F1-score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "def f1(C):\n",
    "    return C[0][0]/(C[0][1]+C[1][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def confusionMatix(matric):\n",
    "\n",
    "    sns.set()\n",
    "    f,ax=plt.subplots()\n",
    "    #y_true = label\n",
    "    #y_pred = ans\n",
    "    C2= matric\n",
    "    print(C2) #打印出來看看\n",
    "    sns.heatmap(C2,annot=True,ax=ax) #畫熱力圖\n",
    "\n",
    "    ax.set_title('confusion matrix') #標題\n",
    "    ax.set_xlabel('predict') #x軸\n",
    "    ax.set_ylabel('true') #y軸"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## train data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "validation_data_path  = \"..\\Case_Presentation_1_Data\\Train_Textual\\\\\"\n",
    "validation_data  = dataloader(validation_data_path)\n",
    "score=0\n",
    "ans = []\n",
    "for text in validation_data.text_list:\n",
    "    for word in text:\n",
    "        if similar(model, word,  target_word)>gap:\n",
    "            score+=similar(model, word, target_word)\n",
    "    if score>standard:\n",
    "        ans.append(0)\n",
    "    else:\n",
    "        ans.append(1)\n",
    "    score=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3607305936073059\n",
      "[[0.395 0.605]\n",
      " [0.49  0.51 ]]\n"
     ]
    }
   ],
   "source": [
    "y_true = train_data.label_list\n",
    "y_pred = ans\n",
    "\n",
    "C = confusion_matrix(y_true, y_pred)\n",
    "C_float = numpy.empty((2,2), dtype=float)\n",
    "\n",
    "for i in range(2):\n",
    "    for j in range(2):\n",
    "        C_float[i][j] = float(C[i][j])/200\n",
    "\n",
    "print(f1(C))\n",
    "print(C_float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.395 0.605]\n",
      " [0.49  0.51 ]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "confusionMatix(C_float)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "validation_data_path  = \"..\\Case_Presentation_1_Data\\Test_Intuitive\\\\\"\n",
    "validation_data  = dataloader(validation_data_path)\n",
    "score=0\n",
    "ans = []\n",
    "for text in validation_data.text_list:\n",
    "    for word in text:\n",
    "        if similar(model, word,  target_word)>gap:\n",
    "            score+=similar(model, word, target_word)\n",
    "    if score>standard:\n",
    "        ans.append(0)\n",
    "    else:\n",
    "        ans.append(1)\n",
    "    score=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3333333333333333\n",
      "[[0.38 0.62]\n",
      " [0.52 0.48]]\n"
     ]
    }
   ],
   "source": [
    "y_true = test_data.label_list\n",
    "y_pred = ans\n",
    "\n",
    "C = confusion_matrix(y_true, y_pred)\n",
    "C_float = numpy.empty((2,2), dtype=float)\n",
    "\n",
    "for i in range(2):\n",
    "    for j in range(2):\n",
    "        C_float[i][j] = float(C[i][j])/200\n",
    "\n",
    "print(f1(C))\n",
    "print(C_float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.38 0.62]\n",
      " [0.52 0.48]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "confusionMatix(C_float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
